Domains, this was a very new concept to me when it was first taught in class. After I understood it, like if it was the simplest idea, but I never had heard it as a specific term. A **domain** by Wikipedia *"is a field of study that defines a set of common requirements, terminology, and functionality for any software program constructed to solve a problem in the area of computer programming, known as domain engineering."*
{: style="text-align: justify"}
The first time you hear the term it sounds like it is too complicated like if it's something totally foreign, when you think about it, it's very simple. In simple terms it is the system or topic your application will be based on and your first thought might be *"I don't need this I already know what i'm doing"* and you might be right but that doesn't mean you don't needn to define your domain. As we mentioned in the post about documentation. The document we develop needs to be understood by anyone. In addition you're trying to deliver a concrete image of what you're working on. 
{: style="text-align: justify"}
A domain makes you dig deep and hard into your topic and allows you to not take things as just basic and easy. For example, if you know a lot about finance you might think that making a banking system should be easy. When you dig deeper and understand other aspects like the laws and other details that us programmers don't really think about from the get go. 
{: style="text-align: justify"}
I have been programming since the age of 15 and I think that even if I didn't study engineering I could've continued learning and gotten a job, but these are the types of things you might not learn in the practice. Implicitly we might do this but the structure provided by the things we learn in formal education is what separates a coder from a software engineer. 
{: style="text-align: justify"}
